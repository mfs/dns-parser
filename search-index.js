var searchIndex = {};
searchIndex["dns_parser"] = {"doc":"","items":[[3,"Question","dns_parser","A parsed chunk of data in the Query section of the packet",null,null],[12,"qname","","",0,null],[12,"qtype","","",0,null],[12,"qclass","","",0,null],[3,"ResourceRecord","","A single DNS record",null,null],[12,"name","","",1,null],[12,"cls","","",1,null],[12,"ttl","","",1,null],[12,"data","","",1,null],[3,"Packet","","Parsed DNS packet",null,null],[12,"header","","",2,null],[12,"questions","","",2,null],[12,"answers","","",2,null],[12,"nameservers","","",2,null],[12,"additional","","",2,null],[3,"SoaRecord","","",null,null],[12,"primary_ns","","",3,null],[12,"mailbox","","",3,null],[12,"serial","","",3,null],[12,"refresh","","",3,null],[12,"retry","","",3,null],[12,"expire","","",3,null],[12,"minimum_ttl","","",3,null],[3,"Name","","The DNS name as stored in the original packet",null,null],[3,"Header","","Represents parsed header of the packet",null,null],[12,"id","","",4,null],[12,"query","","",4,null],[12,"opcode","","",4,null],[12,"authoritative","","",4,null],[12,"truncated","","",4,null],[12,"recursion_desired","","",4,null],[12,"recursion_available","","",4,null],[12,"authenticated_data","","",4,null],[12,"response_code","","",4,null],[12,"questions","","",4,null],[12,"answers","","",4,null],[12,"nameservers","","",4,null],[12,"additional","","",4,null],[3,"Builder","","Allows to build a DNS packet",null,null],[4,"Type","","The TYPE value according to RFC 1035",null,null],[13,"A","","a host addresss",5,null],[13,"NS","","an authoritative name server",5,null],[13,"MF","","a mail forwarder (Obsolete - use MX)",5,null],[13,"CNAME","","the canonical name for an alias",5,null],[13,"SOA","","marks the start of a zone of authority",5,null],[13,"MB","","a mailbox domain name (EXPERIMENTAL)",5,null],[13,"MG","","a mail group member (EXPERIMENTAL)",5,null],[13,"MR","","a mail rename domain name (EXPERIMENTAL)",5,null],[13,"NULL","","a null RR (EXPERIMENTAL)",5,null],[13,"WKS","","a well known service description",5,null],[13,"PTR","","a domain name pointer",5,null],[13,"HINFO","","host information",5,null],[13,"MINFO","","mailbox or mail list information",5,null],[13,"MX","","mail exchange",5,null],[13,"TXT","","text strings",5,null],[13,"AAAA","","IPv6 host address (RFC 2782)",5,null],[13,"SRV","","service record (RFC 2782)",5,null],[13,"OPT","","EDNS0 options (RFC 6891)",5,null],[4,"QueryType","","The QTYPE value according to RFC 1035",null,null],[13,"A","","a host addresss",6,null],[13,"NS","","an authoritative name server",6,null],[13,"MF","","a mail forwarder (Obsolete - use MX)",6,null],[13,"CNAME","","the canonical name for an alias",6,null],[13,"SOA","","marks the start of a zone of authority",6,null],[13,"MB","","a mailbox domain name (EXPERIMENTAL)",6,null],[13,"MG","","a mail group member (EXPERIMENTAL)",6,null],[13,"MR","","a mail rename domain name (EXPERIMENTAL)",6,null],[13,"NULL","","a null RR (EXPERIMENTAL)",6,null],[13,"WKS","","a well known service description",6,null],[13,"PTR","","a domain name pointer",6,null],[13,"HINFO","","host information",6,null],[13,"MINFO","","mailbox or mail list information",6,null],[13,"MX","","mail exchange",6,null],[13,"TXT","","text strings",6,null],[13,"AAAA","","IPv6 host address (RFC 2782)",6,null],[13,"SRV","","service record (RFC 2782)",6,null],[13,"AXFR","","A request for a transfer of an entire zone",6,null],[13,"MAILB","","A request for mailbox-related records (MB, MG or MR)",6,null],[13,"MAILA","","A request for mail agent RRs (Obsolete - see MX)",6,null],[13,"All","","A request for all records",6,null],[4,"Class","","The CLASS value according to RFC 1035",null,null],[13,"IN","","the Internet",7,null],[13,"CS","","the CSNET class (Obsolete - used only for examples in some obsolete\nRFCs)",7,null],[13,"CH","","the CHAOS class",7,null],[13,"HS","","Hesiod [Dyer 87]",7,null],[4,"QueryClass","","The QCLASS value according to RFC 1035",null,null],[13,"IN","","the Internet",8,null],[13,"CS","","the CSNET class (Obsolete - used only for examples in some obsolete\nRFCs)",8,null],[13,"CH","","the CHAOS class",8,null],[13,"HS","","Hesiod [Dyer 87]",8,null],[13,"Any","","Any class",8,null],[4,"ResponseCode","","The RCODE value according to RFC 1035",null,null],[13,"NoError","","",9,null],[13,"FormatError","","",9,null],[13,"ServerFailure","","",9,null],[13,"NameError","","",9,null],[13,"NotImplemented","","",9,null],[13,"Refused","","",9,null],[13,"Reserved","","",9,null],[4,"Opcode","","The OPCODE value according to RFC 1035",null,null],[13,"StandardQuery","","",10,null],[13,"InverseQuery","","",10,null],[13,"ServerStatusRequest","","",10,null],[13,"Reserved","","",10,null],[4,"Error","","Error parsing DNS packet",null,null],[13,"HeaderTooShort","","",11,null],[13,"UnexpectedEOF","","",11,null],[13,"WrongRdataLength","","",11,null],[13,"ReservedBitsAreNonZero","","",11,null],[13,"UnknownLabelFormat","","",11,null],[13,"InvalidQueryType","","",11,null],[13,"InvalidQueryClass","","",11,null],[13,"InvalidType","","",11,null],[13,"InvalidClass","","",11,null],[13,"LabelIsNotAscii","","",11,null],[13,"WrongState","","",11,null],[4,"RRData","","The enumeration that represents known types of DNS resource records data",null,null],[13,"CNAME","","",12,null],[13,"NS","","",12,null],[13,"A","","",12,null],[13,"AAAA","","",12,null],[13,"SRV","","",12,null],[12,"priority","dns_parser::RRData","",12,null],[12,"weight","","",12,null],[12,"port","","",12,null],[12,"target","","",12,null],[13,"SOA","dns_parser","",12,null],[13,"PTR","","",12,null],[13,"MX","","",12,null],[12,"preference","dns_parser::RRData","",12,null],[12,"exchange","","",12,null],[13,"Unknown","dns_parser","",12,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"fmt","","",9,null],[11,"from","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"opcode"}}],[11,"into","","",10,null],[11,"from","","",9,{"inputs":[{"name":"u8"}],"output":{"name":"responsecode"}}],[11,"into","","",9,null],[11,"parse","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"parse","","",8,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"parse","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"parse","","",7,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"fmt","","",3,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"scan","","",13,null],[11,"byte_len","","",13,null],[11,"fmt","","",13,null],[11,"parse","","",2,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"parse","","",4,null],[11,"write","","Write a header to a buffer slice",4,null],[11,"set_truncated","","",4,null],[11,"size","","",4,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","","",12,null],[11,"parse","","",12,null],[11,"new_query","","Creates a new query",14,{"inputs":[{"name":"u16"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"add_question","","Adds a question to the packet",14,null],[11,"build","","Returns the final packet",14,null]],"paths":[[3,"Question"],[3,"ResourceRecord"],[3,"Packet"],[3,"SoaRecord"],[3,"Header"],[4,"Type"],[4,"QueryType"],[4,"Class"],[4,"QueryClass"],[4,"ResponseCode"],[4,"Opcode"],[4,"Error"],[4,"RRData"],[3,"Name"],[3,"Builder"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","",null,null],[10,"context","","",1,null],[11,"fmt","","",0,null],[11,"context","core::result","",2,null],[14,"quick_error!","quick_error","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"],[4,"Result"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches!","matches","",null,null],[14,"_tt_as_expr_hack!","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null]],"paths":[]};
initSearch(searchIndex);
